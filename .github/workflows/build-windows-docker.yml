name: Build Julia for Windows (Docker - Official Method)

on:
  workflow_dispatch:
    inputs:
      julia_version:
        description: 'Julia version to build (e.g., v1.11.6)'
        required: true
        default: 'v1.11.6'
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

jobs:
  build-windows:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone Julia source
        run: |
          echo "Cloning Julia repository..."
          git clone --depth 1 --branch ${{ github.event.inputs.julia_version || 'v1.11.6' }} https://github.com/JuliaLang/julia.git julia-source
          cd julia-source
          echo "Current directory: $(pwd)"
          ls -la

      - name: Create Make.user configuration
        working-directory: julia-source
        run: |
          echo "Creating Make.user with proper configuration..."
          cat > Make.user << 'EOF'
          # Build without GPL libraries
          USE_GPL_LIBS=0
          
          # Use 64-bit BLAS for better performance
          USE_BLAS64=1
          
          # Use OpenBLAS instead of MKL for better compatibility
          USE_INTEL_MKL=0
          
          # Optimize for current CPU
          JULIA_CPU_TARGET=native
          
          # Use BinaryBuilder for dependencies (recommended for Windows)
          USE_BINARYBUILDER=1
          
          # Use GNU C11 standard (same as official Julia build)
          JCFLAGS += -std=gnu11
          JCXXFLAGS += -std=gnu++17
          
          # Build type
          JULIA_DEBUG=0
          
          # Enable verbose output for debugging
          VERBOSE=1
          
          # Use limited parallelism for Windows stability
          MAKEFLAGS=-j2
          EOF
          
          echo "Make.user contents:"
          cat Make.user

      - name: Build Julia using official Docker image
        run: |
          echo "Building Julia using official Docker image..."
          
          # Use the same Docker image as the official Buildkite process
          # From: https://github.com/JuliaCI/julia-buildkite/blob/main/pipelines/main/platforms/build_windows.yml
          docker run --rm \
            -v "$(pwd)/julia-source:/julia-source" \
            -w /julia-source \
            -e JULIA_CPU_THREADS=2 \
            -e VERBOSE=1 \
            juliapackaging/package-windows-x86_64:v7.10 \
            bash -c "
              echo 'Starting Julia build...'
              make -j2
              
              echo 'Testing Julia build...'
              ./julia --version
              ./julia -e 'println(\"Julia build successful!\")'
              
              echo 'Running basic tests...'
              ./julia -e '
                using LinearAlgebra
                println(\"LinearAlgebra works\")
                
                A = rand(3, 3)
                B = inv(A)
                println(\"Matrix operations work\")
                
                using FFTW
                x = rand(100)
                y = fft(x)
                println(\"FFT works\")
              '
              
              echo 'Checking for GPL libraries...'
              objdump -p ./julia.exe | grep -i fftw || echo 'FFTW not found (good)'
              objdump -p ./julia.exe | grep -i gmp || echo 'GMP not found (good)'
              objdump -p ./julia.exe | grep -i mpfr || echo 'MPFR not found (good)'
              
              echo 'Build statistics:'
              ls -la julia.exe
              echo \"File size: \$(stat -c%s julia.exe) bytes\"
            "

      - name: Extract Julia binary
        run: |
          echo "Extracting Julia binary from build directory..."
          cp julia-source/julia.exe ./julia.exe
          
          echo "Julia binary extracted:"
          ls -la julia.exe

      - name: Test Julia build
        run: |
          echo "Testing Julia build..."
          # Note: This would need Wine or similar to run on Linux
          # For now, just verify the file exists and has proper size
          if [ -f "./julia.exe" ]; then
            echo "Julia executable found:"
            ls -la julia.exe
            echo "File size: $(stat -c%s julia.exe) bytes"
          else
            echo "ERROR: Julia executable not found!"
            exit 1
          fi

      - name: Create distribution package
        run: |
          echo "Creating distribution package..."
          
          # Create a directory structure similar to official Julia releases
          mkdir -p julia-windows-package
          cp julia.exe julia-windows-package/
          
          # Add any additional files that should be included
          echo "Julia ${{ github.event.inputs.julia_version || 'v1.11.6' }} Windows Build" > julia-windows-package/README.txt
          echo "Built on: $(date)" >> julia-windows-package/README.txt
          echo "Build type: ${{ github.event.inputs.build_type || 'release' }}" >> julia-windows-package/README.txt
          echo "Built using official Julia Docker image: juliapackaging/package-windows-x86_64:v7.10" >> julia-windows-package/README.txt
          
          # Create ZIP file
          zip -r julia-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}.zip julia-windows-package/

      - name: Upload Julia executable
        uses: actions/upload-artifact@v4
        with:
          name: julia-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}
          path: julia.exe
          retention-days: 30

      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: julia-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}-package
          path: julia-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}.zip
          retention-days: 30 