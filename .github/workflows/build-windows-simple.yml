name: Build Julia on Windows (Simple)

on:
  workflow_dispatch:
    inputs:
      julia_version:
        description: 'Julia version to build (e.g., v1.11.6)'
        required: true
        default: 'v1.11.6'
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-clang
            python
            wget
            curl
            m4
            patch
            tar
            p7zip

      - name: Clone Julia source
        shell: msys2 {0}
        run: |
          echo "Cloning Julia repository..."
          git clone --depth 1 --branch ${{ github.event.inputs.julia_version || 'v1.11.6' }} https://github.com/JuliaLang/julia.git julia-source
          cd julia-source
          echo "Current directory: $(pwd)"
          ls -la

      - name: Cache build dependencies
        uses: actions/cache@v3
        with:
          path: julia-source/deps
          key: ${{ runner.os }}-julia-deps-${{ github.event.inputs.julia_version || 'v1.11.6' }}-nogpl
          restore-keys: |
            ${{ runner.os }}-julia-deps-${{ github.event.inputs.julia_version || 'v1.11.6' }}-
            ${{ runner.os }}-julia-deps-

      - name: Configure build without GPL libraries
        shell: msys2 {0}
        working-directory: julia-source
        run: |
          echo "Configuring build without GPL libraries..."
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          cat > Make.user << EOF
          # Build without GPL libraries
          USE_GPL_LIBS=0
          
          # Use 64-bit BLAS for better performance
          USE_BLAS64=1
          
          # Use OpenBLAS instead of MKL for better compatibility
          USE_INTEL_MKL=0
          
          # Optimize for current CPU
          JULIA_CPU_TARGET=native
          
          # Use all available CPU cores (but limit for Windows stability)
          MAKEFLAGS=-j2
          
          # Build type
          JULIA_DEBUG=${{ github.event.inputs.build_type == 'debug' && '1' || '0' }}
          
          # Enable verbose output for debugging
          VERBOSE=1
          
          # Additional optimization flags
          CFLAGS=-O3
          CXXFLAGS=-O3
          LDFLAGS=-O3
          
          # Use BinaryBuilder for dependencies (recommended for Windows)
          USE_BINARYBUILDER=1
          EOF
          
          echo "Make.user contents:"
          cat Make.user

      - name: Build Julia
        shell: msys2 {0}
        working-directory: julia-source
        timeout-minutes: 180
        run: |
          echo "🏗️ Starting Julia build in $PWD"
          echo "Build configuration:"
          cat Make.user
          
          echo "Starting make..."
          make -j2
          
          echo "Build completed successfully!"

      - name: Test Julia build
        shell: msys2 {0}
        working-directory: julia-source
        run: |
          echo "Testing Julia build..."
          ./julia --version
          ./julia -e "println(\"Julia build successful!\")"
          
          # Test basic functionality
          ./julia -e "
            using LinearAlgebra
            println(\"LinearAlgebra works\")
            
            # Test basic matrix operations
            A = rand(3, 3)
            B = inv(A)
            println(\"Matrix operations work\")
            
            # Test FFT (should work with MKL/OpenBLAS)
            using FFTW
            x = rand(100)
            y = fft(x)
            println(\"FFT works\")
          "

      - name: Verify no GPL libraries
        shell: msys2 {0}
        working-directory: julia-source
        run: |
          echo "Checking for GPL libraries..."
          # Use objdump to check dependencies (MSYS2 equivalent of ldd)
          objdump -p ./julia.exe | grep -i fftw || echo "FFTW not found (good)"
          objdump -p ./julia.exe | grep -i gmp || echo "GMP not found (good)"
          objdump -p ./julia.exe | grep -i mpfr || echo "MPFR not found (good)"

      - name: Create distribution package
        shell: msys2 {0}
        working-directory: julia-source
        run: |
          echo "Creating distribution package..."
          
          # Install to a temporary directory
          make install prefix=/tmp/julia-nogpl
          
          # Create ZIP file
          cd /tmp
          zip -r julia-nogpl-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}.zip julia-nogpl/
          
          # Move to workspace
          mv julia-nogpl-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}.zip $GITHUB_WORKSPACE/

      - name: Upload Julia executable
        uses: actions/upload-artifact@v4
        with:
          name: julia-nogpl-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}
          path: julia-source/julia.exe
          retention-days: 30

      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: julia-nogpl-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}-package
          path: julia-nogpl-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}.zip
          retention-days: 30

  test-packages:
    needs: build-windows
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Julia build
        uses: actions/download-artifact@v4
        with:
          name: julia-nogpl-windows-${{ github.event.inputs.julia_version || 'v1.11.6' }}
          path: julia-build

      - name: Test core functionality
        shell: powershell
        run: |
          echo "Testing Julia functionality..."
          ./julia-build/julia.exe -e "
            using LinearAlgebra
            println(\"LinearAlgebra works\")
            
            # Test basic matrix operations
            A = rand(3, 3)
            B = inv(A)
            println(\"Matrix operations work\")
            
            # Test FFT (should work with MKL/OpenBLAS)
            using FFTW
            x = rand(100)
            y = fft(x)
            println(\"FFT works\")
          "

      - name: Test package compatibility
        shell: powershell
        run: |
          echo "Testing package compatibility..."
          ./julia-build/julia.exe -e "
            # Test that we can load common packages
            using Pkg
            Pkg.add(\"Test\")
            using Test
            println(\"Test package works\")
            
            # Test JSON functionality
            Pkg.add(\"JSON\")
            using JSON
            println(\"JSON package works\")
          " 