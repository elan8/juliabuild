name: Build Windows (Official Method)

on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            diffutils 
            git 
            m4 
            make 
            patch 
            tar 
            p7zip 
            curl 
            python
            wget
            cmake
            mingw-w64-x86_64-gcc 


      - name: Build Julia with BinaryBuilder toolchain
        shell: msys2 {0}
        run: |
          echo "Testing Python execution:"
          python -c 'import platform; print(platform.system())'

          echo "Cloning Julia repository:"
          mkdir -p /c/julia
          cd /c/julia
          git config --global core.eol lf
          git config --global core.autocrlf input
          git clone --depth 1 --branch v1.11.6 https://github.com/JuliaLang/julia.git src
          cd src

          echo "Creating Make.user with proper compiler settings..."
          cat > Make.user << EOF
          # Build without GPL libraries
          USE_GPL_LIBS=0

          # Option 3: Disable BinaryBuilder to avoid stdlib conflicts
          # USE_BINARYBUILDER=0

          # Use GNU C11 standard (same as official Julia build)
          JCFLAGS += -std=gnu11
          JCXXFLAGS += -std=gnu++17

          # Alternative approach: Use preprocessor to avoid stdlib conflicts
          # This tells the compiler to use BinaryBuilder's stdlib instead of MSYS2's
          JCFLAGS += -D__MINGW32__
          JCXXFLAGS += -D__MINGW32__
          
          # Force use of BinaryBuilder's memory allocation functions
          JCFLAGS += -D_aligned_msize=julia_aligned_msize
          JCXXFLAGS += -D_aligned_msize=julia_aligned_msize
          EOF

          echo "Make.user contents:"
          cat Make.user

          echo "Starting build in: $(pwd)"
          make
